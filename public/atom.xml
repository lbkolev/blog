<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>lbkolev.eth</title>
    <subtitle>lachezar kolev&#x27;s blog</subtitle>
    <link href="https://lbkolev.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://lbkolev.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-08-16T00:00:00+00:00</updated>
    <id>https://lbkolev.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Aggregating cross-chain DEX data</title>
        <published>2024-08-16T00:00:00+00:00</published>
        <updated>2024-08-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lbkolev.com/aggregating-cross-chain-dex-data/" type="text/html"/>
        <id>https://lbkolev.com/aggregating-cross-chain-dex-data/</id>
        
        <content type="html">&lt;p&gt;Ethereum has adopted the &lt;a href=&quot;https:&#x2F;&#x2F;ethereum-magicians.org&#x2F;t&#x2F;a-rollup-centric-ethereum-roadmap&#x2F;4698&quot;&gt;rollup-centric&lt;&#x2F;a&gt; roadmap, positioning itself as the global settlement layer for &lt;a href=&quot;https:&#x2F;&#x2F;l2beat.com&#x2F;scaling&#x2F;summary&quot;&gt;potential layer-2s&lt;&#x2F;a&gt; more so than being direct target for &amp;quot;traditional&amp;quot; layer-1 applications. The move allows layer-2s to acquire the economic security of Ethereum as a base layer, the layer-2s on the other hand provide Ethereum with fees for all the block (and blob!) space required to commit each proof. Having such a clear separation of responsibilities provides the means needed to scale the current biggest bottleneck: transaction throughput. One of the downsides of the approach is the increased scatteredness of liquidity and the sheer amount of liquidity pools getting deployed.&lt;&#x2F;p&gt;
&lt;p&gt;One of the problems we&#x27;re trying to solve at &lt;a href=&quot;https:&#x2F;&#x2F;polia.io&quot;&gt;Polia&lt;&#x2F;a&gt; is how to most efficiently provide direct exposure to real-time data from all relevant (liquidity unpoor) decentralised exchanges, without accruing too much unnecessary noise and pressure for the clients that&#x27;ll be consuming the data. Doing so would allow anyone the ability to acquire and keep up-to-date a &amp;quot;world-view&amp;quot; of the current state of all decentralised liquidity pools across multiple networks.&lt;&#x2F;p&gt;
&lt;p&gt;The system used to provide the service consists of two core components, both developed in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node ETL&lt;&#x2F;strong&gt; - pipeline aggregating filtered live data into an append-only stream&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;websocket gateway&lt;&#x2F;strong&gt; - WS server synthesising and exposing the data for client consumption&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;mermaid&quot;&gt;
  graph LR
    A[Networks nodes - Ethereum,Zksync,Arbitrum etc.] --&amp;gt;|Raw Data| B(Node ETL instances)
    B --&amp;gt;|Filtered Data| C[FIFO Stream]
    C --&amp;gt;|Aggregated Data| D(Websocket Gateway)
    D --&amp;gt;|Synthesised Data| E[Clients]
    
    subgraph &amp;quot;ETL Pipeline&amp;quot;
    B
    C
    end
    
    subgraph &amp;quot;Data Exposure&amp;quot;
    D
    end
    
    classDef component fill:#f9f,stroke:#333,stroke-width:2px;
    class B,D component;
&lt;&#x2F;pre&gt;
  &lt;div style=&quot;text-align: center; font-style: italic; margin-top: 10px;&quot;&gt;system overview&lt;&#x2F;div&gt;
&lt;h1 id=&quot;node-etl&quot;&gt;Node ETL&lt;&#x2F;h1&gt;
&lt;p&gt;The Node ETL provides the means to listen, aggregate and transform the raw events notifications received from each &lt;a href=&quot;https:&#x2F;&#x2F;docs.polia.io&#x2F;#networks-endpoints&quot;&gt;supported network&lt;&#x2F;a&gt;. Each EVM compatible layer-2 offers the same means to acquire live data as the underlying layer-1 - &lt;a href=&quot;https:&#x2F;&#x2F;geth.ethereum.org&#x2F;docs&#x2F;interacting-with-geth&#x2F;rpc&#x2F;pubsub&quot;&gt;pubsub JSON-RPC notifications&lt;&#x2F;a&gt;.
As DEFI is mostly still dominated by uniswap-v2 and uniswap-v3, and the hundreds of clones that have been deployed in their honor, the events we&#x27;re most interested in to get an idea of the prices of roughly ~80% of all deployed liquidity pools are respectively:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;uniswap-v2 - &lt;code&gt;event Sync(uint112 reserve0, uint112 reserve1)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;uniswap-v3 - &lt;code&gt;event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each running instance of Node ETL has a &lt;code&gt;Manager&lt;&#x2F;code&gt; that keeps a list of collectors for each supported network. The Manager is actively tracking the healthiness and liveness of each collector. With the increase of the number of networks, you&#x27;d want to also increase the running instances of &lt;code&gt;Node ETL&lt;&#x2F;code&gt; - each supporting different networks, for example, one &lt;code&gt;Node ETL&lt;&#x2F;code&gt; instance might handle &lt;code&gt;Ethereum&lt;&#x2F;code&gt; and &lt;code&gt;Arbitrum&lt;&#x2F;code&gt;, while another manages &lt;code&gt;Zksync&lt;&#x2F;code&gt;, &lt;code&gt;Base&lt;&#x2F;code&gt;, and &lt;code&gt;Optimism&lt;&#x2F;code&gt;. This division allows for optimal resource allocation and prevents any single instance from getting throttled.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Manager&amp;lt;N&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    N: NetworkT,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;manager_config&lt;&#x2F;span&gt;&lt;span&gt;: ManagerConfig,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collectors&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Collector&amp;lt;N&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queue_rx&lt;&#x2F;span&gt;&lt;span&gt;: mpsc::Sender&amp;lt;Resource&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;N::&lt;&#x2F;span&gt;&lt;span&gt;Block, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;N::&lt;&#x2F;span&gt;&lt;span&gt;Log&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each collector consists of a node instance, database pool and a queue that&#x27;ll propagate the events of interest to a dedicated channel that&#x27;ll process them further. As the websocket connections are fundamentally unstable the node client has to be self-healing and reconnect whenever a connection gets broken up or closed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Collector&amp;lt;N&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    N: NetworkT,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;: CollectorConfig,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;: N,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pool&lt;&#x2F;span&gt;&lt;span&gt;: PgPool,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redis-stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queue_rx&lt;&#x2F;span&gt;&lt;span&gt;: mpsc::Sender&amp;lt;Resource&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;N::&lt;&#x2F;span&gt;&lt;span&gt;Block, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;N::&lt;&#x2F;span&gt;&lt;span&gt;Log&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each node client subscribes for the desired events, by applying criteria (also known as &lt;code&gt;Filter&lt;&#x2F;code&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;ethereum.org&#x2F;en&#x2F;developers&#x2F;docs&#x2F;apis&#x2F;json-rpc&#x2F;#eth_newfilter&quot;&gt;official docs&lt;&#x2F;a&gt;), transforms the result into internally meaningful representation, inserts it as is into the database and sends it to a dedicated channel for further processing.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;stream_logs&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stop_signal&lt;&#x2F;span&gt;&lt;span&gt;: watch::Receiver&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;criteria&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&amp;amp;Criteria&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; crate::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stream = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sub_logs&lt;&#x2F;span&gt;&lt;span&gt;(criteria).await?;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span&gt;Some(log) = stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; stop_signal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;has_changed&lt;&#x2F;span&gt;&lt;span&gt;()? {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; log = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; log {
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(log) =&amp;gt; serde_json::from_str::&amp;lt;&amp;lt;N as NetworkT&amp;gt;::Log&amp;gt;(log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;())?,
&lt;&#x2F;span&gt;&lt;span&gt;                Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    error!(
&lt;&#x2F;span&gt;&lt;span&gt;                        kind = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;log_error_count&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                        network = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.config.network.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                    );
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                event
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pool,
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.config.network.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;amp;log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span&gt;().tx_hash,
&lt;&#x2F;span&gt;&lt;span&gt;                    )
&lt;&#x2F;span&gt;&lt;span&gt;                    .await?;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redis-stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; event = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;match_events&lt;&#x2F;span&gt;&lt;span&gt;(log);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.queue_rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(Resource::Log(event)).await {
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(_) =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        warn!(kind=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;propagate_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, network = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.config.network.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), err = ?err);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Large prerequisite is acquiring a list of all the deployed pools as that&#x27;s necessary to apply correct filter criteria (and prevent yourself from drowning in logs (especially in some layer-2s)).&lt;&#x2F;p&gt;
&lt;p&gt;The whole process can be illustrated with the diagram below.
&lt;pre class=&quot;mermaid&quot;&gt;
  graph TD
    A[Node ETL] --&amp;gt; B[Manager]
    B --&amp;gt; C1[Collector 1]
    B --&amp;gt; C2[Collector 2]
    B --&amp;gt; C3[Collector N]
    
    C1 --&amp;gt; D1[Node Instance]
    C1 --&amp;gt; D2[Database Pool]
    C1 --&amp;gt; D3[Redis Stream]
    
    I[Raw Events] &amp;lt;--&amp;gt;|Listen| D1
    D1 --&amp;gt;|Aggregate &amp;amp; Transform| J[Processed Events]
    J --&amp;gt;|Insert| D2[Database Pool]
    J --&amp;gt;|Send| D3[Redis Stream]
    
    subgraph &amp;quot;Collector&amp;quot;
    D1
    D2
    D3
    J
    end
    
    subgraph &amp;quot;Events&amp;quot;
    I
    end
    
    classDef manager fill:#f9f,stroke:#333,stroke-width:2px;
    classDef collector fill:#bbf,stroke:#333,stroke-width:2px;
    classDef process fill:#bfb,stroke:#333,stroke-width:2px;
    class B manager;
    class C1,C2,C3 collector;
    class I,J process;
&lt;&#x2F;pre&gt;
  &lt;&#x2F;p&gt;
&lt;div style=&quot;text-align: center; font-style: italic; margin-top: 10px;&quot;&gt;Node ETL overview&lt;&#x2F;div&gt;
&lt;h1 id=&quot;websocket-gateway&quot;&gt;Websocket Gateway&lt;&#x2F;h1&gt;
&lt;p&gt;The websocket gateway complements the Node ETL by handling client interactions, including authentication, topic subscriptions, and real-time event delivery. The server is utilising the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Actor_model&quot;&gt;actor model&lt;&#x2F;a&gt; to segregate the responsibilities between the different logical components.&lt;&#x2F;p&gt;
&lt;p&gt;The lifecycle of a client establishing a connection is roughly summarised by the below diagram. Please note that the diagram represents happy-path scenarios only.
&lt;pre class=&quot;mermaid&quot;&gt;
  sequenceDiagram
    actor C as Client[Entity]
    participant SES as ClientSession[Actor]
    participant DB as Database[Actor]
    participant SRV as Server[Actor]
    participant DEFI as DEFI[Actor]
    participant RED as Redis
    
    C -&amp;gt;&amp;gt; SES: Begin Handshake
    C -&amp;gt;&amp;gt; SES: Send an API Key
    SES -&amp;gt;&amp;gt; DB: Verify the API Key
    SES -&amp;gt;&amp;gt; SRV: Add the new client to the list of clients with established sessions
    SRV -&amp;gt;&amp;gt; DB: Acquire client&amp;#x27;s relevant information (used credits&amp;#x2F;plan details etc.)
    SRV -&amp;gt;&amp;gt; C: Establish connection
    C -&amp;gt;&amp;gt; SES: Subscribe to specific topics
    SES -&amp;gt;&amp;gt; SRV: Verify the correctness of the message
    
    loop Continuous Communication
        DEFI -&amp;gt;&amp;gt; RED: Poll for new events
        RED --&amp;gt;&amp;gt; DEFI: Return new events
        DEFI --&amp;gt;&amp;gt; DB: Optionally log the events before propagating
        DEFI --&amp;gt;&amp;gt; SRV: Send synthesised events for further client distribution
    end
    
    SRV -&amp;gt;&amp;gt; SES: Send a msg to all client sessions each time a relevant event happens&amp;quot;
    SRV -&amp;gt;&amp;gt; SRV: Modify the user&amp;#x27;s used credits
    SES -&amp;gt;&amp;gt; C: &amp;quot;ClientSession actor sends the messages to all end client entities&amp;quot;
    
    rect rgb(240, 240, 240)
        Note over C,SRV: Session End
        C -&amp;gt;&amp;gt; SES: Close connection
        SES -&amp;gt;&amp;gt; SRV: Notify of client disconnect
        SES -&amp;gt;&amp;gt; SES: Cleanup client-specific resources
        SRV -&amp;gt;&amp;gt; DB: Update client&amp;#x27;s session data (total time, credits used, etc.)
        SRV -&amp;gt;&amp;gt; SRV: Remove client from active subscribers list
    end
&lt;&#x2F;pre&gt;
  &lt;&#x2F;p&gt;
&lt;p&gt;The authentication happens through the &lt;code&gt;Authorization&lt;&#x2F;code&gt; header - as recommended by the &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc6455.html&quot;&gt;Websocket RFC&lt;&#x2F;a&gt; (more on how to authenticate can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.polia.io&#x2F;#authentication&quot;&gt;official docs&lt;&#x2F;a&gt;). &lt;&#x2F;p&gt;
&lt;p&gt;All messages are parsed to determine the networks and dexes of interest of the one connecting. Clients can subscribe to as many networks and&#x2F;or dexes as they&#x27;re interested in - so long as they can handle the amount of data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;StreamHandler&amp;lt;Result&amp;lt;ws::Message, ws::ProtocolError&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;ClientSession {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: Result&amp;lt;ws::Message, ws::ProtocolError&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut Self::&lt;&#x2F;span&gt;&lt;span&gt;Context) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; msg {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(ws::Message::Ping(msg)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hb = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;                ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pong&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;msg);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(ws::Message::Pong(_)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hb = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(ws::Message::Text(txt)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;serde_json::from_str::&amp;lt;ClientPayload&amp;gt;(&amp;amp;txt) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(payload) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; information = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.information.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; networks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_comma_separated_values&lt;&#x2F;span&gt;&lt;span&gt;(payload.networks);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dex = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_comma_separated_values&lt;&#x2F;span&gt;&lt;span&gt;(payload.dex);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; payload.method {
&lt;&#x2F;span&gt;&lt;span&gt;                            Method::Subscribe =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.server_addr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_send&lt;&#x2F;span&gt;&lt;span&gt;(Subscribe {
&lt;&#x2F;span&gt;&lt;span&gt;                                    client_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id,
&lt;&#x2F;span&gt;&lt;span&gt;                                    information: information.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    networks: networks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    kind: payload.kind.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_default&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    dex: dex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                });
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            Method::Unsubscribe =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.server_addr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_send&lt;&#x2F;span&gt;&lt;span&gt;(Unsubscribe {
&lt;&#x2F;span&gt;&lt;span&gt;                                    client_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id,
&lt;&#x2F;span&gt;&lt;span&gt;                                    information: information.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    networks: networks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    kind: payload.kind.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_default&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                    dex: dex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                                });
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(_) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            json!({
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid Format. Please visit https:&#x2F;&#x2F;docs.polia.io for more information on how to format messages. Support is available at support@polia.io.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                            }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                        );
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(ws::Message::Binary(_)) =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; (),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As previously outlined, the ETL-processed logs are propagated to an append-only stream in Redis. This allows the &lt;code&gt;DEFI&lt;&#x2F;code&gt; actor to maintain an event loop with connection to Redis, thereby accessing the newest events from the latest block. Running the &lt;code&gt;node ETL&lt;&#x2F;code&gt; as a standalone process, rather than directly integrating its responsibilities into the &lt;code&gt;websocket-gateway&lt;&#x2F;code&gt;, offers several advantages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It enables easy scaling of the number of websocket instances running simultaneously (redis&#x27;s append-only logs can be consumed by multiple entities).&lt;&#x2F;li&gt;
&lt;li&gt;It prevents an exponential increase in node event consumption. This is particularly crucial when using an RPC provider like &lt;a href=&quot;https:&#x2F;&#x2F;infura.io&quot;&gt;Infura&lt;&#x2F;a&gt;, especially when integrating multiple networks. While running dedicated nodes can alleviate this to some extent, relying solely on external RPC providers for multi-network integration can lead to significant consumption-related challenges.&lt;&#x2F;li&gt;
&lt;li&gt;The setup allows for the utilisation of real-time events by processes that offer additional functionality and flexibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hey!</title>
        <published>2024-05-26T00:00:00+00:00</published>
        <updated>2024-05-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://lbkolev.com/hey/" type="text/html"/>
        <id>https://lbkolev.com/hey/</id>
        
        <content type="html">&lt;p&gt;:wave:&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
